{"version":3,"sources":["components/Navbar.js","components/Airdrop.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","style","backgroundColor","height","href","color","src","width","alt","this","props","account","Component","Airdrop","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","time","seconds","timer","startTimer","bind","assertThisInitialized","countDown","setInterval","setState","secondsToTime","clearInterval","secs","divisor_for_minutes","divisor_for_seconds","h","Math","floor","m","s","ceil","timeleftvar","stakingBalance","issueTokens","airdropTokens","Main","id","margintop","fontWeight","window","web3","utils","fromWei","rwdBalance","tetherBalance","ref","input","type","placeholder","onClick","event","amount","preventDefault","value","toString","toWei","depositTokens","unstakeTokens","components_Airdrop","App","loading","tether","methods","approve","decentralBank","_address","send","from","on","hash","rwd","loadWeb3","loadBlockchainData","ethereum","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","tetherData","Tether","networks","Contract","abi","address","balanceof","console","log","balance","rwdData","RWD","decentralBankData","DecentralBank","content","margin","src_components_Main","components_Navbar","role","maxWidth","minHeight","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a5979c7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n// import Container from 'react-bootstrap/Container';\r\n// import Nav from 'react-bootstrap/Nav';\r\n// import Navbar from 'react-bootstrap/Navbar';\r\n// import NavDropdown from 'react-bootstrap/NavDropdown';\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav className='navbar navbar-dark fixed-top shadow p-1' style={{backgroundColor:'black', height:'50px'}}>\r\n        <a className='navbar-brand col-sm-3 col-md-1 mr-0' href=\"/\" \r\n        style={{color:'white'}}>\r\n        <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTJPiy9azZPdfyML6JKEW7BdBXKeodkjdeqkQ&usqp=CAU' width={80} height={40} className='d-inline-block align-top' alt=''/>\r\n            Decentralized Banking System\r\n            </a>\r\n        <ul className='navbar-nav px-3'>\r\n            <li>\r\n                <small style={{color:'white'}} >Account Number: {this.props.account}\r\n                </small>\r\n            </li>\r\n        </ul>\r\n      </nav>\r\n      \r\n      \r\n    )\r\n  }\r\n}\r\nexport default Navbar","import React, { Component } from 'react'\r\nimport \"./Main.css\"\r\nclass Airdrop extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            time: {},\r\n            seconds: 20\r\n        };\r\n        this.timer = 0;\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.countDown = this.countDown.bind(this);\r\n    }\r\n    startTimer(){\r\n        if(this.timer == 0){\r\n            this.timer = setInterval(this.countDown, 1000)\r\n        }\r\n    }\r\n\r\n    countDown(){\r\n        let seconds = this.state.seconds -1\r\n        this.setState({\r\n            time: this.secondsToTime(seconds),\r\n            seconds: seconds\r\n        })\r\n        if(seconds == 0){\r\n            clearInterval(this.timer)\r\n        }\r\n    }\r\n    secondsToTime(secs){\r\n        let hours, minutes, seconds\r\n        hours = Math.floor(secs / (60 * 60))\r\n        let divisor_for_minutes = secs % (60 *60)\r\n        minutes = Math.floor(divisor_for_minutes / 60)\r\n        let divisor_for_seconds = divisor_for_minutes % 60\r\n        seconds = Math.ceil(divisor_for_seconds)\r\n        let obj = {\r\n            'h': hours,\r\n            'm': minutes,\r\n            's': seconds\r\n        }\r\n        return obj\r\n    }\r\n    \r\n    componentDidMount(){\r\n        let timeleftvar = this.secondsToTime(this.state.seconds)\r\n        this.setState({time : timeleftvar})\r\n    }\r\n    airdropTokens() {\r\n        let stakingB = this.props.stakingBalance\r\n        if(stakingB >= '5000000000000000000'){\r\n            this.startTimer()\r\n            if(this.state.time.s === 0){\r\n                {this.props.issueTokens()}\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        this.airdropTokens()\r\n    return (\r\n      <div style={{color: 'black'}} className=\"air1\">\r\n        {this.state.time.m} : {this.state.time.s}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Airdrop\r\n","import React, { Component } from 'react'\r\nimport Airdrop from './Airdrop'\r\nimport \"./Main.css\"\r\n\r\nclass Main extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <table className='table' id=\"st\" style={{ margintop: '200px' }}>\r\n          <thead>\r\n            <tr style={{ color: 'white' }} id=\"tab\">\r\n              <th>Staking Balance</th>\r\n              <th>Reward Balance</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr style={{ color: 'white', fontWeight: \"bold\" }}>\r\n              <td>ETH : {window.web3.utils.fromWei(this.props.stakingBalance, 'Ether')}</td>\r\n              <td>RWD : {window.web3.utils.fromWei(this.props.rwdBalance, 'Ether')}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <div className=\"rectangle\">\r\n          <text className=\"fonts\">Stake Tokens</text>\r\n          <text className=\"font-b\">Balance : {window.web3.utils.fromWei(this.props.tetherBalance, 'Ether')}</text>\r\n          <div className=\"form-group\">\r\n            <input\r\n              ref={(input) => { this.input = input }}\r\n              type=\"eth\" className=\"form-control1\" id=\"exampleFormControlInput1\" placeholder=\"ENTER THE NUMBER OF ETHER\" />\r\n            <img src='https://download.logo.wine/logo/Ethereum/Ethereum-Logo.wine.png' height=\"90px\" alt=\"\"></img>\r\n\r\n            <button\r\n              onClick={(event) => {\r\n                event.preventDefault()\r\n                let amount\r\n                amount = this.input.value.toString()\r\n                amount = window.web3.utils.toWei(amount, 'Ether')\r\n                this.props.depositTokens(amount)\r\n              }}\r\n              type=\"submit\" className=\"btn btn-primary btn-lg btn-block\" id=\"deposit\">Deposit</button>\r\n            <button\r\n              onClick={(event) => {\r\n                event.preventDefault()\r\n                this.props.unstakeTokens()\r\n              }}\r\n              type=\"button\" className=\"btn btn-primary btn-lg btn-block\" id=\"withdraw\">Withdraw</button>\r\n            <div>\r\n            <text className=\"air\">Airdrop \r\n            </text>\r\n            <Airdrop stakingBalance = {this.props.stakingBalance} issueTokens={this.props.issueTokens}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Main","import React, { Component } from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport Web3 from 'web3';\r\nimport Tether from '../abis/Tether.json'\r\nimport RWD from '../abis/RWD.json'\r\nimport DecentralBank from '../abis/DecentralBank.json'\r\nimport Main from './Main.js'\r\nimport \"./App.css\"\r\nimport Airdrop from \"./Airdrop\";\r\nclass App extends Component {\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n    }\r\n    async loadWeb3() {\r\n        if (window.ethereum) {\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } else if (window.web3) {\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        } else {\r\n            window.alert('No ethereum browser detected! You can check out MetaMask!')\r\n        }\r\n    }\r\n    async loadBlockchainData() {\r\n        const web3 = await window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({ account: accounts[0] })\r\n        const networkId = await web3.eth.net.getId()\r\n        // Load Tether Contract\r\n        const tetherData = Tether.networks[networkId]\r\n        if (tetherData) {\r\n            const tether = new web3.eth.Contract(Tether.abi, tetherData.address)\r\n            this.setState({ tether })\r\n\r\n            let tetherBalance = await tether.methods.balanceof(this.state.account).call()\r\n            this.setState({ tetherBalance: tetherBalance.toString() })\r\n            console.log({ balance: tetherBalance })\r\n        } else {\r\n            window.alert('Error! Tether contract not deployed - no detected network!')\r\n        }\r\n        const rwdData = RWD.networks[networkId]\r\n        if (rwdData) {\r\n            const rwd = new web3.eth.Contract(RWD.abi, rwdData.address)\r\n            this.setState({ rwd })\r\n\r\n            let rwdBalance = await rwd.methods.balanceof(this.state.account).call()\r\n            this.setState({ rwdBalance: rwdBalance.toString() })\r\n            console.log({ balance: rwdBalance })\r\n        } else {\r\n            window.alert('Error! RWD contract not deployed - no detected network!')\r\n        }\r\n        const decentralBankData = DecentralBank.networks[networkId]\r\n        if (decentralBankData) {\r\n            const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address)\r\n            this.setState({ decentralBank })\r\n\r\n            let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call()\r\n            this.setState({ stakingBalance: stakingBalance.toString() })\r\n            console.log({ balance: stakingBalance })\r\n        } else {\r\n            window.alert('Error! Decentral Bank contract not deployed - no detected network!')\r\n        }\r\n            this.setState({ loading: false })\r\n    }\r\n\r\n    // two functions one that stakes and one that unstakes --\r\n    // leverage our decentralbank contract -- deposit tokens and unstaking\r\n    // All of this is for this is for the staking\r\n    // depositTokens transferFrom ......\r\n    // function approve transaction hash -----\r\n    // STAKING FUNCTION ?? >> decentralBank.depositTokens(send transactionHash =>)\r\n\r\n    // staking function\r\n\r\n    \r\n\r\n    //unstaking Function\r\n    depositTokens = (amount) => {\r\n        this.setState({loading: true})\r\n        this.state.tether.methods.approve(this.state.decentralBank._address, amount).send({from: this.state.account}).on('transactionHash', (hash) => {\r\n        this.state.decentralBank.methods.depositTokens(amount).send({from: this.state.account}).on('transactionHash', (hash) => {\r\n            this.setState({loading: false})\r\n        })\r\n    })\r\n    }\r\n    unstakeTokens = () => {\r\n        this.setState({loading: true})\r\n        this.state.decentralBank.methods.unstakeTokens().send({from: this.state.account}).on('transactionHash',(hash) => {\r\n            this.setState({loading: false})\r\n        })\r\n    }\r\n    issueTokens = () => {\r\n        this.setState({loading: true})\r\n        this.state.decentralBank.methods.issueTokens().send({from: this.state.account}).on('transactionHash',(hash) => {\r\n            this.setState({loading: false})\r\n        })\r\n    }\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            account: '0x0',\r\n            tether: {},\r\n            rwd: {},\r\n            decentralBank: {},\r\n            tetherBalance: '0',\r\n            rwdBalance: '0',\r\n            stakingBalance: '0',\r\n            loading: true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let content\r\n        {\r\n            this.state.loading ? content =\r\n                <p id='loader' className=\"text-center\" style={{ margin: '30px' }}>\r\n                    LOADING PLEASE...</p> : content = <Main \r\n                    tetherBalance = {this.state.tetherBalance}\r\n                    rwdBalance = {this.state.rwdBalance}\r\n                    stakingBalance = {this.state.stakingBalance}\r\n                    depositTokens={this.depositTokens}\r\n                    unstakeTokens={this.unstakeTokens}\r\n                    issueTokens={this.issueTokens}\r\n                    />\r\n        }\r\n        return (\r\n            <div className=\"image\">\r\n                <Navbar account={this.state.account} />\r\n                <div className=\"container-fluid mt-5 row\">\r\n                    <main role=\"main\" className='col-lg-12 ml-auto mr-auto' style={{ maxWidth: '600px', minHeight: '100vm' }}>\r\n                        <div>\r\n                            {/* <Main tetherBalance={this.state.tetherBalance}\r\n                            rwdBalance={this.state.rwdBalance}\r\n                            stakingBalance={this.state.stakingBalance}\r\n                            stakeTokens={this.stakeTokens}\r\n                            unstakeTokens={this.unstakeTokens}\r\n                            /> */}\r\n                            {/* <Main/> */}\r\n                            {content}\r\n                            {/* {console.log(this.state.rwdBalance)} */}\r\n                        </div>\r\n                    </main>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}